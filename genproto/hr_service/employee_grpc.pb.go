// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: blacklist_submodule/hr_service/employee.proto

package hr_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EmployeesService_Create_FullMethodName = "/hr_service.EmployeesService/Create"
	EmployeesService_Get_FullMethodName    = "/hr_service.EmployeesService/Get"
	EmployeesService_GetAll_FullMethodName = "/hr_service.EmployeesService/GetAll"
	EmployeesService_Update_FullMethodName = "/hr_service.EmployeesService/Update"
	EmployeesService_Delete_FullMethodName = "/hr_service.EmployeesService/Delete"
)

// EmployeesServiceClient is the client API for EmployeesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeesServiceClient interface {
	Create(ctx context.Context, in *EmployeeCreate, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Employee, error)
	GetAll(ctx context.Context, in *GetAllEmployeeReq, opts ...grpc.CallOption) (*GetAllEmployeeRes, error)
	Update(ctx context.Context, in *EmployeeUpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Void, error)
}

type employeesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeesServiceClient(cc grpc.ClientConnInterface) EmployeesServiceClient {
	return &employeesServiceClient{cc}
}

func (c *employeesServiceClient) Create(ctx context.Context, in *EmployeeCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, EmployeesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesServiceClient) Get(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Employee, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Employee)
	err := c.cc.Invoke(ctx, EmployeesService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesServiceClient) GetAll(ctx context.Context, in *GetAllEmployeeReq, opts ...grpc.CallOption) (*GetAllEmployeeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllEmployeeRes)
	err := c.cc.Invoke(ctx, EmployeesService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesServiceClient) Update(ctx context.Context, in *EmployeeUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, EmployeesService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeesServiceClient) Delete(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, EmployeesService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeesServiceServer is the server API for EmployeesService service.
// All implementations must embed UnimplementedEmployeesServiceServer
// for forward compatibility
type EmployeesServiceServer interface {
	Create(context.Context, *EmployeeCreate) (*Void, error)
	Get(context.Context, *GetByIdReq) (*Employee, error)
	GetAll(context.Context, *GetAllEmployeeReq) (*GetAllEmployeeRes, error)
	Update(context.Context, *EmployeeUpdateReq) (*Void, error)
	Delete(context.Context, *GetByIdReq) (*Void, error)
	mustEmbedUnimplementedEmployeesServiceServer()
}

// UnimplementedEmployeesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeesServiceServer struct {
}

func (UnimplementedEmployeesServiceServer) Create(context.Context, *EmployeeCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEmployeesServiceServer) Get(context.Context, *GetByIdReq) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEmployeesServiceServer) GetAll(context.Context, *GetAllEmployeeReq) (*GetAllEmployeeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedEmployeesServiceServer) Update(context.Context, *EmployeeUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEmployeesServiceServer) Delete(context.Context, *GetByIdReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEmployeesServiceServer) mustEmbedUnimplementedEmployeesServiceServer() {}

// UnsafeEmployeesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeesServiceServer will
// result in compilation errors.
type UnsafeEmployeesServiceServer interface {
	mustEmbedUnimplementedEmployeesServiceServer()
}

func RegisterEmployeesServiceServer(s grpc.ServiceRegistrar, srv EmployeesServiceServer) {
	s.RegisterService(&EmployeesService_ServiceDesc, srv)
}

func _EmployeesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeesService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).Create(ctx, req.(*EmployeeCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeesService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).Get(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeesService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).GetAll(ctx, req.(*GetAllEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeesService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).Update(ctx, req.(*EmployeeUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeesService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeesServiceServer).Delete(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeesService_ServiceDesc is the grpc.ServiceDesc for EmployeesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hr_service.EmployeesService",
	HandlerType: (*EmployeesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EmployeesService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EmployeesService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _EmployeesService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EmployeesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EmployeesService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blacklist_submodule/hr_service/employee.proto",
}
