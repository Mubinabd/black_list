// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: blacklist_submodule/hr_service/hr.proto

package hr_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HRService_Comment_FullMethodName = "/hr_service.HRService/Comment"
)

// HRServiceClient is the client API for HRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HRServiceClient interface {
	Comment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Void, error)
}

type hRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHRServiceClient(cc grpc.ClientConnInterface) HRServiceClient {
	return &hRServiceClient{cc}
}

func (c *hRServiceClient) Comment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, HRService_Comment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HRServiceServer is the server API for HRService service.
// All implementations must embed UnimplementedHRServiceServer
// for forward compatibility
type HRServiceServer interface {
	Comment(context.Context, *CommentReq) (*Void, error)
	mustEmbedUnimplementedHRServiceServer()
}

// UnimplementedHRServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHRServiceServer struct {
}

func (UnimplementedHRServiceServer) Comment(context.Context, *CommentReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (UnimplementedHRServiceServer) mustEmbedUnimplementedHRServiceServer() {}

// UnsafeHRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HRServiceServer will
// result in compilation errors.
type UnsafeHRServiceServer interface {
	mustEmbedUnimplementedHRServiceServer()
}

func RegisterHRServiceServer(s grpc.ServiceRegistrar, srv HRServiceServer) {
	s.RegisterService(&HRService_ServiceDesc, srv)
}

func _HRService_Comment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).Comment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_Comment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).Comment(ctx, req.(*CommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HRService_ServiceDesc is the grpc.ServiceDesc for HRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hr_service.HRService",
	HandlerType: (*HRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Comment",
			Handler:    _HRService_Comment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blacklist_submodule/hr_service/hr.proto",
}
