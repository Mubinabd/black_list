// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: blacklist_submodule/hr_service/admin.proto

package hr_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AdminAndHRService_Create_FullMethodName  = "/hr_service.AdminAndHRService/Create"
	AdminAndHRService_Get_FullMethodName     = "/hr_service.AdminAndHRService/Get"
	AdminAndHRService_GetAll_FullMethodName  = "/hr_service.AdminAndHRService/GetAll"
	AdminAndHRService_Update_FullMethodName  = "/hr_service.AdminAndHRService/Update"
	AdminAndHRService_Delete_FullMethodName  = "/hr_service.AdminAndHRService/Delete"
	AdminAndHRService_Approve_FullMethodName = "/hr_service.AdminAndHRService/Approve"
)

// AdminAndHRServiceClient is the client API for AdminAndHRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminAndHRServiceClient interface {
	Create(ctx context.Context, in *AdminAndHRCreate, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*AdminAndHR, error)
	GetAll(ctx context.Context, in *GetAllAdminAndHRReq, opts ...grpc.CallOption) (*GetAllAdminAndHRRes, error)
	Update(ctx context.Context, in *AdminAndHRUpdateReq, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Void, error)
	Approve(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Void, error)
}

type adminAndHRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminAndHRServiceClient(cc grpc.ClientConnInterface) AdminAndHRServiceClient {
	return &adminAndHRServiceClient{cc}
}

func (c *adminAndHRServiceClient) Create(ctx context.Context, in *AdminAndHRCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, AdminAndHRService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAndHRServiceClient) Get(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*AdminAndHR, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAndHR)
	err := c.cc.Invoke(ctx, AdminAndHRService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAndHRServiceClient) GetAll(ctx context.Context, in *GetAllAdminAndHRReq, opts ...grpc.CallOption) (*GetAllAdminAndHRRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllAdminAndHRRes)
	err := c.cc.Invoke(ctx, AdminAndHRService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAndHRServiceClient) Update(ctx context.Context, in *AdminAndHRUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, AdminAndHRService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAndHRServiceClient) Delete(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, AdminAndHRService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAndHRServiceClient) Approve(ctx context.Context, in *GetByIdReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, AdminAndHRService_Approve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminAndHRServiceServer is the server API for AdminAndHRService service.
// All implementations must embed UnimplementedAdminAndHRServiceServer
// for forward compatibility
type AdminAndHRServiceServer interface {
	Create(context.Context, *AdminAndHRCreate) (*Void, error)
	Get(context.Context, *GetByIdReq) (*AdminAndHR, error)
	GetAll(context.Context, *GetAllAdminAndHRReq) (*GetAllAdminAndHRRes, error)
	Update(context.Context, *AdminAndHRUpdateReq) (*Void, error)
	Delete(context.Context, *GetByIdReq) (*Void, error)
	Approve(context.Context, *GetByIdReq) (*Void, error)
	mustEmbedUnimplementedAdminAndHRServiceServer()
}

// UnimplementedAdminAndHRServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminAndHRServiceServer struct {
}

func (UnimplementedAdminAndHRServiceServer) Create(context.Context, *AdminAndHRCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAdminAndHRServiceServer) Get(context.Context, *GetByIdReq) (*AdminAndHR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAdminAndHRServiceServer) GetAll(context.Context, *GetAllAdminAndHRReq) (*GetAllAdminAndHRRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAdminAndHRServiceServer) Update(context.Context, *AdminAndHRUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAdminAndHRServiceServer) Delete(context.Context, *GetByIdReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAdminAndHRServiceServer) Approve(context.Context, *GetByIdReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedAdminAndHRServiceServer) mustEmbedUnimplementedAdminAndHRServiceServer() {}

// UnsafeAdminAndHRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminAndHRServiceServer will
// result in compilation errors.
type UnsafeAdminAndHRServiceServer interface {
	mustEmbedUnimplementedAdminAndHRServiceServer()
}

func RegisterAdminAndHRServiceServer(s grpc.ServiceRegistrar, srv AdminAndHRServiceServer) {
	s.RegisterService(&AdminAndHRService_ServiceDesc, srv)
}

func _AdminAndHRService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAndHRCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAndHRServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAndHRService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAndHRServiceServer).Create(ctx, req.(*AdminAndHRCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAndHRService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAndHRServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAndHRService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAndHRServiceServer).Get(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAndHRService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAdminAndHRReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAndHRServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAndHRService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAndHRServiceServer).GetAll(ctx, req.(*GetAllAdminAndHRReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAndHRService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAndHRUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAndHRServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAndHRService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAndHRServiceServer).Update(ctx, req.(*AdminAndHRUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAndHRService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAndHRServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAndHRService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAndHRServiceServer).Delete(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAndHRService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAndHRServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAndHRService_Approve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAndHRServiceServer).Approve(ctx, req.(*GetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminAndHRService_ServiceDesc is the grpc.ServiceDesc for AdminAndHRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminAndHRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hr_service.AdminAndHRService",
	HandlerType: (*AdminAndHRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AdminAndHRService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AdminAndHRService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _AdminAndHRService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AdminAndHRService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AdminAndHRService_Delete_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _AdminAndHRService_Approve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blacklist_submodule/hr_service/admin.proto",
}
